generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Farm {
  id        Int       @id @default(autoincrement())
  name      String
  location  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relationships
  sections  Section[]
  moistureReadings    MoistureReading[]
  irrigationEvents    IrrigationEvent[]
  moistureDeviceStatuses    MoistureDeviceStatus[]
  irrigationDeviceStatuses  IrrigationDeviceStatus[]
  deviceAcks         DeviceAck[]

  @@map("farms")
}

model Section {
  id        Int      @id @default(autoincrement())
  name      String
  farm_id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  farm      Farm     @relation(fields: [farm_id], references: [id], onDelete: Cascade)
  moistureReadings    MoistureReading[]
  irrigationEvents    IrrigationEvent[]
  moistureDeviceStatuses    MoistureDeviceStatus[]
  irrigationDeviceStatuses  IrrigationDeviceStatus[]
  deviceAcks         DeviceAck[]

  @@map("sections")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  farm_ids  Int[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MoistureReading {
  id         Int      @id @default(autoincrement())
  farm_id    Int
  section_id Int
  value      Float
  timestamp  DateTime @default(now())

  // Relationships
  farm       Farm     @relation(fields: [farm_id], references: [id], onDelete: Cascade)
  section    Section  @relation(fields: [section_id], references: [id], onDelete: Cascade)

  @@map("moisture_readings")
}

model IrrigationEvent {
  id         Int      @id @default(autoincrement())
  farm_id    Int
  section_id Int
  water_ml   Float
  start_time DateTime
  end_time   DateTime

  // Relationships
  farm       Farm     @relation(fields: [farm_id], references: [id], onDelete: Cascade)
  section    Section  @relation(fields: [section_id], references: [id], onDelete: Cascade)

  @@map("irrigation_events")
}

model MoistureDeviceStatus {
  id                  Int      @id @default(autoincrement())
  device_id           String
  farm_id             Int
  section_id          Int
  mqtt                Boolean
  wifi                Boolean
  uptime              BigInt
  timestamp           BigInt
  last_error          String
  enable_deep_sleep   Boolean
  reporting_interval  Int
  deep_sleep_duration Int
  createdAt           DateTime @default(now())

  // Relationships
  farm        Farm     @relation(fields: [farm_id], references: [id], onDelete: Cascade)
  section     Section  @relation(fields: [section_id], references: [id], onDelete: Cascade)

  @@map("moisture_device_status")
}

model IrrigationDeviceStatus {
  id              Int      @id @default(autoincrement())
  device_id       String
  farm_id         Int
  section_id      Int
  uptime          BigInt
  wifi            Int
  mqtt            Int
  last_error      String
  valve_on        Int
  mode            String
  latest_moisture Int
  threshold       Int
  pulse_count     Int
  water_ml        Int
  timestamp       BigInt
  createdAt       DateTime @default(now())

  // Relationships
  farm        Farm     @relation(fields: [farm_id], references: [id], onDelete: Cascade)
  section     Section  @relation(fields: [section_id], references: [id], onDelete: Cascade)

  @@map("irrigation_device_status")
}

model DeviceAck {
  id         Int      @id @default(autoincrement())
  device_id  String?
  farm_id    Int
  section_id Int
  ack_json   Json
  timestamp  DateTime @default(now())

  // Relationships
  farm       Farm     @relation(fields: [farm_id], references: [id], onDelete: Cascade)
  section    Section  @relation(fields: [section_id], references: [id], onDelete: Cascade)

  @@map("device_acks")
}
